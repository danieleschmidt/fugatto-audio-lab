version: '3.8'

services:
  # Main Fugatto Audio Lab API Service
  fugatto-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: fugatto-audio-lab:latest
    container_name: fugatto-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - WORKERS=4
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://fugatto:fugatto_secure_2025@postgres:5432/fugatto_db
      - CACHE_SIZE_MB=2048
      - MAX_CONCURRENT_TASKS=8
      - ENABLE_MONITORING=true
      - ENABLE_SECURITY=true
      - ENABLE_AUTO_SCALING=true
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      - redis
      - postgres
      - prometheus
    networks:
      - fugatto-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: fugatto-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - fugatto-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: fugatto-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=fugatto_db
      - POSTGRES_USER=fugatto
      - POSTGRES_PASSWORD=fugatto_secure_2025
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fugatto-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: fugatto-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - fugatto-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: fugatto-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=fugatto_admin_2025
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - fugatto-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: fugatto-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx-sites:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - fugatto-api
    networks:
      - fugatto-network
    deploy:
      - resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Worker nodes for auto-scaling
  fugatto-worker-1:
    build:
      context: .
      dockerfile: Dockerfile.worker
    image: fugatto-audio-worker:latest
    container_name: fugatto-worker-1
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - WORKER_ID=worker-1
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
      - MAX_TASKS=4
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      - redis
      - fugatto-api
    networks:
      - fugatto-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  fugatto-worker-2:
    build:
      context: .
      dockerfile: Dockerfile.worker
    image: fugatto-audio-worker:latest
    container_name: fugatto-worker-2
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - WORKER_ID=worker-2
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
      - MAX_TASKS=4
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      - redis
      - fugatto-api
    networks:
      - fugatto-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Log aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:latest
    container_name: fugatto-fluentd
    restart: unless-stopped
    volumes:
      - ./config/fluentd.conf:/fluentd/etc/fluent.conf
      - ./logs:/fluentd/log
    ports:
      - "24224:24224"
    networks:
      - fugatto-network

# Persistent volumes
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Network configuration
networks:
  fugatto-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16