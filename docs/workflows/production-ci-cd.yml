# Production CI/CD Pipeline Template
# Copy this file to .github/workflows/ci.yml to enable automated CI/CD
# Requires repository admin to manually create due to security policies

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan

env:
  PYTHON_VERSION: '3.10'
  PYTORCH_VERSION: '2.3.0'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        torch-version: ['2.3.0', '2.4.0']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install torch==${{ matrix.torch-version }} torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -e ".[dev,eval]"
    
    - name: Run security checks
      run: |
        bandit -r fugatto_lab/ -f json -o bandit-report.json
        safety check --json --output safety-report.json
    
    - name: Run tests with coverage
      run: |
        pytest --cov=fugatto_lab --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install linting dependencies
      run: |
        pip install black isort ruff mypy types-requests types-PyYAML
    
    - name: Run linting
      run: |
        black --check fugatto_lab tests
        isort --check-only fugatto_lab tests
        ruff check fugatto_lab tests
        mypy fugatto_lab

  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t fugatto-audio-lab:latest .
        docker run --rm fugatto-audio-lab:latest python -c "import fugatto_lab; print('Import successful')"

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -e ".[dev,eval]"
        pip install pytest-benchmark memory-profiler
    
    - name: Run performance tests
      run: |
        pytest tests/test_performance.py --benchmark-only --benchmark-json=benchmark.json
    
    - name: Comment benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        comment-on-pr: true
        github-token: ${{ secrets.GITHUB_TOKEN }}